generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  user
  admin
}

enum TournamentStatus {
  draft
  active
  finished
}

enum Routing {
  AMERICAS
  EUROPE
  ASIA
  SEA
}

model User {
  id                         String                      @id @default(cuid())
  email                      String                      @unique
  displayName                String?
  imageUrl                   String?
  role                       UserRole                    @default(user)
  createdAt                  DateTime                    @default(now())
  linkedAccounts             LinkedAccount[]
  linkedRiotAccounts         LinkedRiotAccount[]
  riotMatches                RiotMatch[]
  riotVerificationChallenges RiotVerificationChallenge[]
  points                     TournamentPoint[]
  registrations              TournamentRegistration[]
}

model LinkedAccount {
  id           String   @id @default(cuid())
  userId       String
  game         String
  puuid        String   @unique
  platform     String
  routing      Routing
  riotSubject  String?
  summonerName String?
  linkedAt     DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model LinkedRiotAccount {
  id        String   @id @default(cuid())
  userId    String
  gameName  String
  tagLine   String
  region    String
  platform  String
  puuid     String   @unique
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, puuid])
  @@index([userId])
  @@index([puuid])
}

model RiotVerificationChallenge {
  id             String   @id @default(cuid())
  userId         String
  puuid          String
  expectedIconId Int
  expiresAt      DateTime
  consumed       Boolean  @default(false)
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([puuid])
}

model RiotMatch {
  id       String   @id @default(cuid())
  userId   String
  puuid    String
  matchId  String   @unique
  syncedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([puuid])
  @@index([matchId])
}

model Tournament {
  id            String                   @id @default(cuid())
  name          String
  description   String?
  startAt       DateTime
  endAt         DateTime
  queues        Int[]
  scoringJson   Json
  status        TournamentStatus         @default(draft)
  createdAt     DateTime                 @default(now())
  points        TournamentPoint[]
  registrations TournamentRegistration[]

  @@index([status])
}

model TournamentRegistration {
  id           String     @id @default(cuid())
  tournamentId String
  userId       String
  registeredAt DateTime   @default(now())
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, userId])
  @@index([tournamentId])
}

model MatchRecord {
  id          String   @id @default(cuid())
  matchId     String   @unique
  puuid       String
  routing     Routing
  queue       Int
  gameStart   BigInt
  durationSec Int
  win         Boolean
  kda         Float?
  championId  Int?
  processedAt DateTime @default(now())

  @@index([puuid, gameStart])
}

model TournamentPoint {
  id           String     @id @default(cuid())
  tournamentId String
  userId       String
  matchId      String
  points       Int
  reason       String
  createdAt    DateTime   @default(now())
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, userId, matchId, reason])
  @@index([tournamentId, userId])
}
