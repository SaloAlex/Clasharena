const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

async function testSupabaseConnection() {
  console.log('üîç Probando conectividad con Supabase...\n');

  // Verificar variables de entorno
  console.log('üìã Variables de entorno:');
  console.log('URL:', process.env.NEXT_PUBLIC_SUPABASE_URL ? '‚úÖ Configurada' : '‚ùå Faltante');
  console.log('KEY:', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? '‚úÖ Configurada' : '‚ùå Faltante');
  
  if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {
    console.log('\n‚ùå Error: Variables de entorno faltantes');
    return;
  }

  try {
    // Crear cliente de Supabase
    console.log('\nüîß Creando cliente de Supabase...');
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    );

    // Probar conexi√≥n b√°sica
    console.log('üåê Probando conexi√≥n b√°sica...');
    const { data, error } = await supabase.from('users').select('count').limit(1);
    
    if (error) {
      console.log('‚ùå Error en conexi√≥n:', error.message);
      console.log('Detalles:', error);
    } else {
      console.log('‚úÖ Conexi√≥n exitosa');
      console.log('Datos:', data);
    }

    // Probar autenticaci√≥n
    console.log('\nüîê Probando autenticaci√≥n...');
    const { data: authData, error: authError } = await supabase.auth.getSession();
    
    if (authError) {
      console.log('‚ùå Error en autenticaci√≥n:', authError.message);
    } else {
      console.log('‚úÖ Autenticaci√≥n funcionando');
      console.log('Sesi√≥n:', authData.session ? 'Activa' : 'No hay sesi√≥n');
    }

    // Probar ping a Supabase
    console.log('\nüèì Probando ping a Supabase...');
    try {
      const response = await fetch(process.env.NEXT_PUBLIC_SUPABASE_URL + '/rest/v1/', {
        headers: {
          'apikey': process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
          'Authorization': `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY}`
        }
      });
      
      if (response.ok) {
        console.log('‚úÖ Ping exitoso');
      } else {
        console.log('‚ùå Ping fall√≥:', response.status, response.statusText);
      }
    } catch (pingError) {
      console.log('‚ùå Error en ping:', pingError.message);
    }

  } catch (error) {
    console.log('‚ùå Error general:', error.message);
    console.log('Stack:', error.stack);
  }
}

testSupabaseConnection();
